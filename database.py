import oracledb
from dotenv import load_dotenv
from logger_config import logger
from datetime import date
import os


class Database:
    def __init__(self):
        try:
            load_dotenv()

            self.conn = oracledb.connect(
                user=os.getenv("ORACLE_USER"),
                password=os.getenv("ORACLE_PASSWORD"),
                dsn=f"{os.getenv("ORACLE_HOST")}:{os.getenv("ORACLE_PORT", "1521")}/{os.getenv("ORACLE_SERVICE")}"
            )
            self.cursor = self.conn.cursor()
            logger.info("✅ Conectado ao banco de dados Oracle.")

            try:
                self.cursor.execute("""
                                    SELECT table_name
                                    FROM user_tables
                                    WHERE table_name = 'HARVEST_LOSS'
                                    """)
                tabela = self.cursor.fetchone()

                if tabela is None:
                    logger.warning("⚠️ Tabela 'harvest_loss' não encontrada. Criando agora...")
                    self.cursor.execute("""
                                        CREATE TABLE harvest_loss
                                        (
                                            id               NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                            cultura          VARCHAR2(100) NOT NULL,
                                            area_plantada_ha FLOAT NOT NULL,
                                            prod_estimada_t  FLOAT NOT NULL,
                                            prod_real_t      FLOAT NOT NULL,
                                            data_colheita    DATE  NOT NULL,
                                            obs              VARCHAR2(255)
                                        )
                                        """)
                    self.conn.commit()
                    logger.info("✅ Tabela 'harvest_loss' criada com sucesso.")
                else:
                    logger.info("📦 Tabela 'harvest_loss' já existe.")
            except Exception as e:
                logger.error(f"Erro ao verificar ou criar tabela: {e}")

        except Exception as e:
            logger.error(f"Erro ao conectar ao banco de dados: {e}")
            raise

    def create(self, cultura: str, area: float, estimada: float, real: float, data_colheita: date,
               obs: str = "") -> None:
        try:
            self.cursor.execute("""
                                SELECT COUNT(*)
                                FROM harvest_loss
                                WHERE cultura = :1 AND area_plantada_ha = :2 AND prod_estimada_t = :3
                  AND prod_real_t = :4 AND data_colheita = :5 AND NVL(obs, 'NULL') = NVL(:6, 'NULL')
                                """, [cultura, area, estimada, real, data_colheita, obs])
            existe = self.cursor.fetchone()[0]

            if existe:
                logger.warning("⚠️ Registro já existe. Ignorando inserção duplicada.")
                return

            self.cursor.execute("""
                                INSERT INTO harvest_loss (cultura, area_plantada_ha, prod_estimada_t, prod_real_t,
                                                          data_colheita, obs)
                                VALUES (:1, :2, :3, :4, :5, :6)
                                """, [cultura, area, estimada, real, data_colheita, obs])
            self.conn.commit()
            logger.info("📦 Perda agrícola inserida com sucesso no banco.")

        except Exception as e:
            logger.error(f"Erro ao inserir no banco: {e}")

    def read(self) -> list:
        try:
            self.cursor.execute("SELECT * FROM harvest_loss ORDER BY id")
            rows = self.cursor.fetchall()
            logger.info(f"🔍 {len(rows)} registros recuperados do banco.")
            return rows
        except Exception as e:
            logger.error(f"Erro ao buscar dados: {e}")
            return []

    def update(self, id_: int, campo: str, novo_valor) -> None:
        try:
            query = f"UPDATE harvest_loss SET {campo} = :1 WHERE id = :2"
            self.cursor.execute(query, [novo_valor, id_])
            self.conn.commit()
            logger.info(f"🔄 Registro ID {id_} atualizado com sucesso.")
        except Exception as e:
            logger.error(f"Erro ao atualizar registro: {e}")

    def delete(self, id_: int) -> None:
        try:
            self.cursor.execute("DELETE FROM harvest_loss WHERE id = :1", [id_])
            self.conn.commit()
            logger.info(f"🗑️ Registro ID {id_} excluído com sucesso.")
        except Exception as e:
            logger.error(f"Erro ao deletar registro: {e}")

    def close(self) -> None:
        try:
            self.cursor.close()
            self.conn.close()
            logger.info("🔌 Conexão com banco de dados encerrada.")
        except Exception as e:
            logger.warning(f"Erro ao encerrar conexão: {e}")
